{"ast":null,"code":"export class CiudadComponent {\n  constructor(ciudadService, paisService, fb) {\n    this.ciudadService = ciudadService;\n    this.paisService = paisService;\n    this.fb = fb;\n    this.ciudades = [];\n    this.paises = [];\n    this.datosPaises = [];\n    this.editingCiudadId = null; // Inicializado como null\n    this.ciudadForm = this.fb.group({\n      _id: [null],\n      nombre: ['', Validators.required],\n      pais: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarCiudades();\n    this.cargarPaises();\n  }\n  cargarCiudades() {\n    this.ciudadService.getDatosP().subscribe(data => {\n      this.ciudades = data;\n      console.log('Ciudades cargadas:', this.ciudades);\n    }, error => {\n      console.error('Error al cargar ciudades:', error);\n    });\n  }\n  cargarPaises() {\n    this.paisService.getDatosP().subscribe(data => {\n      this.datosPaises = data; // Actualizar la propiedad datosPaises\n      console.log('Datos de países cargados:', this.datosPaises);\n    }, error => {\n      console.error('Error al cargar datos de países:', error);\n    });\n  }\n  crearCiudad(event) {\n    event.preventDefault();\n    if (this.ciudadForm.valid) {\n      const nuevaCiudad = {\n        nombre: this.ciudadForm.value.nombre,\n        pais: this.ciudadForm.value.pais\n      };\n      this.ciudadService.addDatosP(nuevaCiudad).subscribe(data => {\n        console.log('Ciudad creada:', data);\n        this.ciudadForm.reset();\n        this.cargarCiudades();\n      }, error => {\n        console.error('Error al crear ciudad:', error);\n      });\n    } else {\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\n    }\n  }\n  editarCiudad(ciudad) {\n    this.editingCiudadId = ciudad._id || null; // Manejar undefined asignándolo a null\n    this.ciudadForm.patchValue({\n      _id: ciudad._id,\n      nombre: ciudad.nombre,\n      pais: ciudad.pais\n    });\n  }\n  eliminarCiudad(id) {\n    if (id) {\n      this.ciudadService.deleteDatosP(id).subscribe(data => {\n        console.log('Ciudad eliminada:', data);\n        this.cargarCiudades();\n      }, error => {\n        console.error('Error al eliminar ciudad:', error);\n      });\n    }\n  }\n}","map":{"version":3,"names":["CiudadComponent","constructor","ciudadService","paisService","fb","ciudades","paises","datosPaises","editingCiudadId","ciudadForm","group","_id","nombre","Validators","required","pais","ngOnInit","cargarCiudades","cargarPaises","getDatosP","subscribe","data","console","log","error","crearCiudad","event","preventDefault","valid","nuevaCiudad","value","addDatosP","reset","editarCiudad","ciudad","patchValue","eliminarCiudad","id","deleteDatosP"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\ciudad\\ciudad.component.ts"],"sourcesContent":["export class CiudadComponent implements OnInit {\r\n  ciudades: CuidadModel[] = [];\r\n  paises: DatosPModel[] = [];\r\n  datosPaises: DatosPModel[] = [];\r\n  ciudadForm: FormGroup;\r\n  editingCiudadId: string | null = null; // Inicializado como null\r\n\r\n  constructor(\r\n    private ciudadService: CiudadService,\r\n    private paisService: DatosPService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.ciudadForm = this.fb.group({\r\n      _id: [null], // Cambiado de '\"\"' a 'null'\r\n      nombre: ['', Validators.required],\r\n      pais: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarCiudades();\r\n    this.cargarPaises();\r\n  }\r\n\r\n  cargarCiudades() {\r\n    this.ciudadService.getDatosP().subscribe(\r\n      data => {\r\n        this.ciudades = data;\r\n        console.log('Ciudades cargadas:', this.ciudades);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar ciudades:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  cargarPaises() {\r\n    this.paisService.getDatosP().subscribe(\r\n      data => {\r\n        this.datosPaises = data; // Actualizar la propiedad datosPaises\r\n        console.log('Datos de países cargados:', this.datosPaises);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de países:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  crearCiudad(event: Event) {\r\n    event.preventDefault();\r\n  \r\n    if (this.ciudadForm.valid) {\r\n      const nuevaCiudad: CuidadModel = {\r\n        nombre: this.ciudadForm.value.nombre,\r\n        pais: this.ciudadForm.value.pais,\r\n      };\r\n  \r\n      this.ciudadService.addDatosP(nuevaCiudad).subscribe(\r\n        data => {\r\n          console.log('Ciudad creada:', data);\r\n          this.ciudadForm.reset();\r\n          this.cargarCiudades();\r\n        },\r\n        error => {\r\n          console.error('Error al crear ciudad:', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\r\n    }\r\n  }\r\n  \r\n  editarCiudad(ciudad: CuidadModel) {\r\n    this.editingCiudadId = ciudad._id || null; // Manejar undefined asignándolo a null\r\n    this.ciudadForm.patchValue({\r\n      _id: ciudad._id,\r\n      nombre: ciudad.nombre,\r\n      pais: ciudad.pais,\r\n    });\r\n  }\r\n  \r\n  eliminarCiudad(id: string | undefined) {\r\n    if (id) {\r\n      this.ciudadService.deleteDatosP(id).subscribe(\r\n        data => {\r\n          console.log('Ciudad eliminada:', data);\r\n          this.cargarCiudades();\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar ciudad:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}