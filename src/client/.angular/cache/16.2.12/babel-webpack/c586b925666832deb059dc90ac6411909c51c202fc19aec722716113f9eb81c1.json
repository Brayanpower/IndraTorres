{"ast":null,"code":"import { __decorate } from \"tslib\";\n// ciudad.component.ts\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let CiudadComponent = class CiudadComponent {\n  constructor(ciudadService, paisService, fb, toastrService) {\n    this.ciudadService = ciudadService;\n    this.paisService = paisService;\n    this.fb = fb;\n    this.toastrService = toastrService;\n    this.ciudades = [];\n    this.paises = [];\n    this.datosPaises = [];\n    this.editingCiudadId = null; // Inicializado como null\n    this.ciudadForm = this.fb.group({\n      _id: [null],\n      nombre: ['', Validators.required],\n      pais: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarCiudades();\n    this.cargarPaises();\n  }\n  cargarCiudades() {\n    this.ciudadService.getDatosP().subscribe(data => {\n      this.ciudades = data;\n      console.log('Ciudades cargadas:', this.ciudades);\n    }, error => {\n      console.error('Error al cargar ciudades:', error);\n    });\n  }\n  cargarPaises() {\n    this.paisService.getDatosP().subscribe(data => {\n      this.datosPaises = data; // Actualizar la propiedad datosPaises\n      console.log('Datos de países cargados:', this.datosPaises);\n    }, error => {\n      console.error('Error al cargar datos de países:', error);\n    });\n  }\n  crearCiudad(event) {\n    event.preventDefault();\n    if (this.ciudadForm.valid) {\n      const nuevaCiudad = {\n        nombre: this.ciudadForm.value.nombre,\n        pais: this.ciudadForm.value.pais\n      };\n      this.ciudadService.addDatosP(nuevaCiudad).subscribe(data => {\n        console.log('Ciudad creada:', data);\n        this.ciudadForm.reset();\n        this.cargarCiudades();\n        this.toastrService.success('Ciudad creada correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al crear ciudad:', error);\n        this.toastrService.error('Error al crear la ciudad', 'Error');\n      });\n    } else {\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\n    }\n  }\n  seleccionarCiudad() {\n    // Aquí puedes agregar la lógica que deseas al seleccionar una ciudad\n    console.log('Ciudad seleccionada');\n  }\n  cargarDatosP() {\n    this.paisService.getDatosP().subscribe(data => {\n      this.datosPaises = data;\n      console.log('Datos cargados:', this.datosPaises);\n    }, error => {\n      console.error('Error al cargar datos:', error);\n    });\n  }\n  eliminarCiudad(id) {\n    if (id) {\n      this.ciudadService.deleteDatosP(id).subscribe(data => {\n        console.log('Ciudad eliminada:', data);\n        this.cargarCiudades();\n        this.toastrService.success('Ciudad eliminada correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al eliminar ciudad:', error);\n        this.toastrService.error('Error al eliminar la ciudad', 'Error');\n      });\n    }\n  }\n  editarCiudad(ciudad) {\n    this.ciudadForm.patchValue(ciudad);\n  }\n  actualizarCiudad() {\n    if (this.ciudadForm.valid) {\n      this.ciudadService.updateDatosP(this.ciudadForm.value).subscribe(() => {\n        this.cargarCiudades();\n        this.ciudadForm.reset();\n        this.toastrService.success('Ciudad actualizada correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al actualizar país:', error);\n        this.toastrService.error('Error al actualizar la ciudad', 'Error');\n      });\n    }\n  }\n};\nCiudadComponent = __decorate([Component({\n  selector: 'app-ciudad',\n  templateUrl: './ciudad.component.html',\n  styleUrls: ['./ciudad.component.css']\n})], CiudadComponent);","map":{"version":3,"names":["Component","Validators","CiudadComponent","constructor","ciudadService","paisService","fb","toastrService","ciudades","paises","datosPaises","editingCiudadId","ciudadForm","group","_id","nombre","required","pais","ngOnInit","cargarCiudades","cargarPaises","getDatosP","subscribe","data","console","log","error","crearCiudad","event","preventDefault","valid","nuevaCiudad","value","addDatosP","reset","success","warning","seleccionarCiudad","cargarDatosP","eliminarCiudad","id","deleteDatosP","editarCiudad","ciudad","patchValue","actualizarCiudad","updateDatosP","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\ciudad\\ciudad.component.ts"],"sourcesContent":["// ciudad.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CiudadService } from '../../services/ciudad.service';\r\nimport { DatosPService } from '../../services/datos-pservice.service';\r\nimport { CuidadModel } from '../../models/datosPModel';\r\nimport { DatosPModel } from '../../models/datosPModel';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-ciudad',\r\n  templateUrl: './ciudad.component.html',\r\n  styleUrls: ['./ciudad.component.css']\r\n})\r\nexport class CiudadComponent implements OnInit {\r\n  ciudades: CuidadModel[] = [];\r\n  paises: DatosPModel[] = [];\r\n  datosPaises: DatosPModel[] = [];\r\n  ciudadForm: FormGroup;\r\n  editingCiudadId: string | null = null; // Inicializado como null\r\n\r\n  constructor(\r\n    private ciudadService: CiudadService,\r\n    private paisService: DatosPService,\r\n    private fb: FormBuilder,\r\n    private toastrService:ToastrService\r\n  ) {\r\n    this.ciudadForm = this.fb.group({\r\n      _id: [null], // Cambiado de '\"\"' a 'null'\r\n      nombre: ['', Validators.required],\r\n      pais: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarCiudades();\r\n    this.cargarPaises();\r\n  }\r\n\r\n  cargarCiudades() {\r\n    this.ciudadService.getDatosP().subscribe(\r\n      data => {\r\n        this.ciudades = data;\r\n        console.log('Ciudades cargadas:', this.ciudades);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar ciudades:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  cargarPaises() {\r\n    this.paisService.getDatosP().subscribe(\r\n      data => {\r\n        this.datosPaises = data; // Actualizar la propiedad datosPaises\r\n        console.log('Datos de países cargados:', this.datosPaises);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de países:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  crearCiudad(event: Event) {\r\n    event.preventDefault();\r\n  \r\n    if (this.ciudadForm.valid) {\r\n      const nuevaCiudad: CuidadModel = {\r\n        nombre: this.ciudadForm.value.nombre,\r\n        pais: this.ciudadForm.value.pais,\r\n      };\r\n  \r\n      this.ciudadService.addDatosP(nuevaCiudad).subscribe(\r\n        data => {\r\n          console.log('Ciudad creada:', data);\r\n          this.ciudadForm.reset();\r\n          this.cargarCiudades();\r\n          this.toastrService.success('Ciudad creada correctamente','Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al crear ciudad:', error);\r\n          this.toastrService.error('Error al crear la ciudad', 'Error');\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\r\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.','Advertencia');\r\n    }\r\n  }\r\n\r\n  seleccionarCiudad() {\r\n    // Aquí puedes agregar la lógica que deseas al seleccionar una ciudad\r\n    console.log('Ciudad seleccionada');\r\n  }\r\n  cargarDatosP() {\r\n    this.paisService.getDatosP().subscribe(\r\n      data => {\r\n        this.datosPaises = data;\r\n        console.log('Datos cargados:', this.datosPaises);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos:', error);\r\n      }\r\n    );\r\n  }\r\n  eliminarCiudad(id: string | undefined) {\r\n    if (id) {\r\n      this.ciudadService.deleteDatosP(id).subscribe(\r\n        data => {\r\n          console.log('Ciudad eliminada:', data);\r\n          this.cargarCiudades();\r\n          this.toastrService.success('Ciudad eliminada correctamente','Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar ciudad:', error);\r\n          this.toastrService.error('Error al eliminar la ciudad', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarCiudad(ciudad: DatosPModel) {\r\n    this.ciudadForm.patchValue(ciudad);\r\n  }\r\n  \r\n  actualizarCiudad() {\r\n    if (this.ciudadForm.valid) {\r\n      this.ciudadService.updateDatosP(this.ciudadForm.value).subscribe(\r\n        () => {\r\n          this.cargarCiudades();\r\n          this.ciudadForm.reset();\r\n          this.toastrService.success('Ciudad actualizada correctamente','Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar país:', error);\r\n          this.toastrService.error('Error al actualizar la ciudad', 'Error');\r\n\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}