{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let AutosAdminComponent = class AutosAdminComponent {\n  constructor(autosService, fb, toastrService) {\n    this.autosService = autosService;\n    this.fb = fb;\n    this.toastrService = toastrService;\n    this.auto = [];\n    this.autosFiltrados = [];\n    this.autoForm = this.fb.group({\n      imagen: ['', Validators.required],\n      marca: ['', Validators.required],\n      modelo: ['', Validators.required],\n      placas: ['', Validators.required],\n      asientos: ['', Validators.required],\n      maletas: ['', Validators.required],\n      tipoCaja: ['', Validators.required],\n      tipoVehiculo: ['', Validators.required],\n      cantVehiculos: ['', Validators.required],\n      categoria: ['', Validators.required],\n      precioDia: ['', Validators.required] // Corregido Preciodia a precioDia\n    });\n  }\n\n  ngOnInit() {\n    this.obtenerDatosAutos();\n  }\n  obtenerDatosAutos() {\n    this.autosService.getAutos().subscribe(data => {\n      this.auto = data;\n      this.autosFiltrados = [...this.auto];\n    }, error => {\n      console.error('Error al cargar datos de autos:', error);\n    });\n  }\n  filtrarPorCategoria(event) {\n    const categoria = event.target.value;\n    if (categoria === 'todo') {\n      // Mostrar todos los autos sin filtrar\n      this.autosFiltrados = this.auto;\n    } else {\n      // Filtrar por la categoría seleccionada\n      this.autosFiltrados = this.auto.filter(auto => auto.categoria === categoria);\n    }\n  }\n  agregarAuto() {\n    if (this.autoForm.valid) {\n      this.autosService.addAuto(this.autoForm.value).subscribe(data => {\n        this.toastrService.success('Auto agregado correctamente', 'Éxito');\n        this.obtenerDatosAutos(); // Recargar la lista de autos después de agregar uno nuevo\n        this.autoForm.reset(); // Reiniciar el formulario\n      }, error => {\n        this.toastrService.error('Error al agregar el auto', 'Error');\n        console.error('Error al agregar el auto:', error);\n      });\n    }\n  }\n  eliminarAuto(id) {\n    if (confirm('¿Estás seguro de que deseas eliminar este auto?')) {\n      this.autosService.deleteAuto(id).subscribe(() => {\n        this.toastrService.success('Auto eliminado correctamente', 'Éxito');\n        this.obtenerDatosAutos(); // Recargar la lista de autos después de eliminar uno\n      }, error => {\n        this.toastrService.error('Error al eliminar el auto', 'Error');\n        console.error('Error al eliminar el auto:', error);\n      });\n    }\n  }\n  actualizarAuto(auto) {\n    if (confirm('¿Estás seguro de que deseas actualizar este auto?')) {\n      this.autosService.updateAuto(auto).subscribe(() => {\n        this.toastrService.success('Auto actualizado correctamente', 'Éxito');\n        this.obtenerDatosAutos(); // Recargar la lista de autos después de actualizar uno\n      }, error => {\n        this.toastrService.error('Error al actualizar el auto', 'Error');\n        console.error('Error al actualizar el auto:', error);\n      });\n    }\n  }\n};\nAutosAdminComponent = __decorate([Component({\n  selector: 'app-autos-admin',\n  templateUrl: './autos-admin.component.html',\n  styleUrls: ['./autos-admin.component.css']\n})], AutosAdminComponent);","map":{"version":3,"names":["Component","Validators","AutosAdminComponent","constructor","autosService","fb","toastrService","auto","autosFiltrados","autoForm","group","imagen","required","marca","modelo","placas","asientos","maletas","tipoCaja","tipoVehiculo","cantVehiculos","categoria","precioDia","ngOnInit","obtenerDatosAutos","getAutos","subscribe","data","error","console","filtrarPorCategoria","event","target","value","filter","agregarAuto","valid","addAuto","success","reset","eliminarAuto","id","confirm","deleteAuto","actualizarAuto","updateAuto","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\services\\autos.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AutosService } from 'src/app/services/autos.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AutoModel } from '../../models/datosPModel';\r\n\r\n@Component({\r\n  selector: 'app-autos-admin',\r\n  templateUrl: './autos-admin.component.html',\r\n  styleUrls: ['./autos-admin.component.css']\r\n})\r\nexport class AutosAdminComponent implements OnInit {\r\n  autoForm: FormGroup; // Definir FormGroup\r\n  auto: AutoModel[] = [];\r\n  autosFiltrados: AutoModel[] = [];\r\n\r\n  constructor(\r\n    private autosService: AutosService,\r\n    private fb: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.autoForm = this.fb.group({ // Asociar formControls con el FormGroup\r\n      imagen: ['', Validators.required],\r\n      marca: ['', Validators.required],\r\n      modelo: ['', Validators.required],\r\n      placas: ['', Validators.required],\r\n      asientos: ['', Validators.required],\r\n      maletas: ['', Validators.required],\r\n      tipoCaja: ['', Validators.required],\r\n      tipoVehiculo: ['', Validators.required],\r\n      cantVehiculos: ['', Validators.required],\r\n      categoria: ['', Validators.required],\r\n      precioDia: ['', Validators.required], // Corregido Preciodia a precioDia\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.obtenerDatosAutos();\r\n  }\r\n\r\n  obtenerDatosAutos() {\r\n    this.autosService.getAutos().subscribe(\r\n      data => {\r\n        this.auto = data;\r\n        this.autosFiltrados = [...this.auto];\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de autos:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  filtrarPorCategoria(event: any) {\r\n    const categoria = event.target.value;\r\n    if (categoria === 'todo') {\r\n        // Mostrar todos los autos sin filtrar\r\n        this.autosFiltrados = this.auto;\r\n    } else {\r\n        // Filtrar por la categoría seleccionada\r\n        this.autosFiltrados = this.auto.filter(auto => auto.categoria === categoria);\r\n    }\r\n  }\r\n\r\n  agregarAuto() {\r\n    if (this.autoForm.valid) {\r\n      this.autosService.addAuto(this.autoForm.value).subscribe(\r\n        (data) => {\r\n          this.toastrService.success('Auto agregado correctamente', 'Éxito');\r\n          this.obtenerDatosAutos(); // Recargar la lista de autos después de agregar uno nuevo\r\n          this.autoForm.reset(); // Reiniciar el formulario\r\n        },\r\n        (error) => {\r\n          this.toastrService.error('Error al agregar el auto', 'Error');\r\n          console.error('Error al agregar el auto:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  eliminarAuto(id: string) {\r\n    if (confirm('¿Estás seguro de que deseas eliminar este auto?')) {\r\n      this.autosService.deleteAuto(id).subscribe(\r\n        () => {\r\n          this.toastrService.success('Auto eliminado correctamente', 'Éxito');\r\n          this.obtenerDatosAutos(); // Recargar la lista de autos después de eliminar uno\r\n        },\r\n        (error) => {\r\n          this.toastrService.error('Error al eliminar el auto', 'Error');\r\n          console.error('Error al eliminar el auto:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  actualizarAuto(auto: AutoModel) {\r\n    if (confirm('¿Estás seguro de que deseas actualizar este auto?')) {\r\n      this.autosService.updateAuto(auto).subscribe(\r\n        () => {\r\n          this.toastrService.success('Auto actualizado correctamente', 'Éxito');\r\n          this.obtenerDatosAutos(); // Recargar la lista de autos después de actualizar uno\r\n        },\r\n        (error) => {\r\n          this.toastrService.error('Error al actualizar el auto', 'Error');\r\n          console.error('Error al actualizar el auto:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}