{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/estado.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ngx-toastr\";\nexport class EstadoComponent {\n  constructor(estadoService, fb, toastrService) {\n    this.estadoService = estadoService;\n    this.fb = fb;\n    this.toastrService = toastrService;\n    this.estados = [];\n    this.paises = [];\n    this.datosPaises = [];\n    this.datosCiudad = [];\n    this.editingEstadoId = null; // Inicializado como null\n    this.estadoForm = this.fb.group({\n      _id: [null],\n      nombre: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarEstados();\n  }\n  cargarEstados() {\n    this.estadoService.getEstados().subscribe(data => {\n      this.estados = data;\n      console.log('Estados cargados:', this.estados);\n    }, error => {\n      console.error('Error al cargar estados:', error);\n    });\n  }\n  crearEstado(event) {\n    event.preventDefault();\n    if (this.estadoForm.valid) {\n      const nuevoEstado = {\n        nombre: this.estadoForm.value.nombre,\n        pais: this.estadoForm.value.pais\n      };\n      this.estadoService.addEstado(nuevoEstado).subscribe(data => {\n        console.log('Estado creado:', data);\n        this.estadoForm.reset();\n        this.cargarEstados();\n        this.toastrService.success('Estado creado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al crear estado:', error);\n        this.toastrService.error('Error al crear el estado', 'Error');\n      });\n    } else {\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\n    }\n  }\n  eliminarEstado(id) {\n    if (id) {\n      this.estadoService.deleteEstado(id).subscribe(data => {\n        console.log('Estado eliminado:', data);\n        this.cargarEstados();\n        this.toastrService.success('Estado eliminado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al eliminar estado:', error);\n        this.toastrService.error('Error al eliminar el estado', 'Error');\n      });\n    }\n  }\n  editarEstado(estado) {\n    this.estadoForm.patchValue(estado);\n  }\n  actualizarEstado() {\n    if (this.estadoForm.valid) {\n      this.estadoService.updateEstado(this.estadoForm.value).subscribe(() => {\n        this.cargarEstados();\n        this.estadoForm.reset();\n        this.toastrService.success('Estado actualizado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al actualizar estado:', error);\n        this.toastrService.error('Error al actualizar el estado', 'Error');\n      });\n    }\n  }\n  static #_ = this.ɵfac = function EstadoComponent_Factory(t) {\n    return new (t || EstadoComponent)(i0.ɵɵdirectiveInject(i1.EstadoService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EstadoComponent,\n    selectors: [[\"app-estado\"]],\n    decls: 0,\n    vars: 0,\n    template: function EstadoComponent_Template(rf, ctx) {},\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","EstadoComponent","constructor","estadoService","fb","toastrService","estados","paises","datosPaises","datosCiudad","editingEstadoId","estadoForm","group","_id","nombre","required","ngOnInit","cargarEstados","getEstados","subscribe","data","console","log","error","crearEstado","event","preventDefault","valid","nuevoEstado","value","pais","addEstado","reset","success","warning","eliminarEstado","id","deleteEstado","editarEstado","estado","patchValue","actualizarEstado","updateEstado","_","i0","ɵɵdirectiveInject","i1","EstadoService","i2","FormBuilder","i3","ToastrService","_2","selectors","decls","vars","template","EstadoComponent_Template","rf","ctx","styles"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\estado\\estado.component.ts"],"sourcesContent":["// estado.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport {  DatosPModel, EstadoModel } from '../../models/datosPModel';\r\nimport { EstadoService } from '../../services/estado.service';\r\n\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-estado',\r\n  templateUrl: './estado.component.html',\r\n  styleUrls: ['./estado.component.css']\r\n})\r\nexport class EstadoComponent implements OnInit {\r\n  estados: EstadoModel[] = [];\r\n  paises: DatosPModel[] = [];\r\n  datosPaises: DatosPModel[] = [];\r\n\r\n  datosCiudad: DatosPModel[] = [];\r\n  estadoForm: FormGroup;\r\n  editingEstadoId: string | null = null; // Inicializado como null\r\n\r\n  constructor(\r\n    private estadoService: EstadoService,\r\n    private fb: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.estadoForm = this.fb.group({\r\n      _id: [null],\r\n      nombre: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarEstados();\r\n  }\r\n\r\n  cargarEstados() {\r\n    this.estadoService.getEstados().subscribe(\r\n      data => {\r\n        this.estados = data;\r\n        console.log('Estados cargados:', this.estados);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar estados:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  crearEstado(event: Event) {\r\n    event.preventDefault();\r\n\r\n    if (this.estadoForm.valid) {\r\n      const nuevoEstado: EstadoModel = {\r\n        nombre: this.estadoForm.value.nombre,\r\n        pais: this.estadoForm.value.pais,\r\n      };\r\n\r\n      this.estadoService.addEstado(nuevoEstado).subscribe(\r\n        data => {\r\n          console.log('Estado creado:', data);\r\n          this.estadoForm.reset();\r\n          this.cargarEstados();\r\n          this.toastrService.success('Estado creado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al crear estado:', error);\r\n          this.toastrService.error('Error al crear el estado', 'Error');\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\r\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\r\n    }\r\n  }\r\n\r\n  eliminarEstado(id: string | undefined) {\r\n    if (id) {\r\n      this.estadoService.deleteEstado(id).subscribe(\r\n        data => {\r\n          console.log('Estado eliminado:', data);\r\n          this.cargarEstados();\r\n          this.toastrService.success('Estado eliminado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar estado:', error);\r\n          this.toastrService.error('Error al eliminar el estado', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarEstado(estado: EstadoModel) {\r\n    this.estadoForm.patchValue(estado);\r\n  }\r\n\r\n  actualizarEstado() {\r\n    if (this.estadoForm.valid) {\r\n      this.estadoService.updateEstado(this.estadoForm.value).subscribe(\r\n        () => {\r\n          this.cargarEstados();\r\n          this.estadoForm.reset();\r\n          this.toastrService.success('Estado actualizado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar estado:', error);\r\n          this.toastrService.error('Error al actualizar el estado', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAKA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAQnE,OAAM,MAAOC,eAAe;EAS1BC,YACUC,aAA4B,EAC5BC,EAAe,EACfC,aAA4B;IAF5B,KAAAF,aAAa,GAAbA,aAAa;IACb,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,aAAa,GAAbA,aAAa;IAXvB,KAAAC,OAAO,GAAkB,EAAE;IAC3B,KAAAC,MAAM,GAAkB,EAAE;IAC1B,KAAAC,WAAW,GAAkB,EAAE;IAE/B,KAAAC,WAAW,GAAkB,EAAE;IAE/B,KAAAC,eAAe,GAAkB,IAAI,CAAC,CAAC;IAOrC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC9BC,GAAG,EAAE,CAAC,IAAI,CAAC;MACXC,MAAM,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ;KACjC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAA,aAAaA,CAAA;IACX,IAAI,CAACd,aAAa,CAACe,UAAU,EAAE,CAACC,SAAS,CACvCC,IAAI,IAAG;MACL,IAAI,CAACd,OAAO,GAAGc,IAAI;MACnBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAChB,OAAO,CAAC;IAChD,CAAC,EACDiB,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CACF;EACH;EAEAC,WAAWA,CAACC,KAAY;IACtBA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,IAAI,CAACf,UAAU,CAACgB,KAAK,EAAE;MACzB,MAAMC,WAAW,GAAgB;QAC/Bd,MAAM,EAAE,IAAI,CAACH,UAAU,CAACkB,KAAK,CAACf,MAAM;QACpCgB,IAAI,EAAE,IAAI,CAACnB,UAAU,CAACkB,KAAK,CAACC;OAC7B;MAED,IAAI,CAAC3B,aAAa,CAAC4B,SAAS,CAACH,WAAW,CAAC,CAACT,SAAS,CACjDC,IAAI,IAAG;QACLC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;QACnC,IAAI,CAACT,UAAU,CAACqB,KAAK,EAAE;QACvB,IAAI,CAACf,aAAa,EAAE;QACpB,IAAI,CAACZ,aAAa,CAAC4B,OAAO,CAAC,6BAA6B,EAAE,OAAO,CAAC;MACpE,CAAC,EACDV,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAI,CAAClB,aAAa,CAACkB,KAAK,CAAC,0BAA0B,EAAE,OAAO,CAAC;MAC/D,CAAC,CACF;KACF,MAAM;MACLF,OAAO,CAACE,KAAK,CAAC,wEAAwE,CAAC;MACvF,IAAI,CAAClB,aAAa,CAAC6B,OAAO,CAAC,wEAAwE,EAAE,aAAa,CAAC;;EAEvH;EAEAC,cAAcA,CAACC,EAAsB;IACnC,IAAIA,EAAE,EAAE;MACN,IAAI,CAACjC,aAAa,CAACkC,YAAY,CAACD,EAAE,CAAC,CAACjB,SAAS,CAC3CC,IAAI,IAAG;QACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,IAAI,CAAC;QACtC,IAAI,CAACH,aAAa,EAAE;QACpB,IAAI,CAACZ,aAAa,CAAC4B,OAAO,CAAC,gCAAgC,EAAE,OAAO,CAAC;MACvE,CAAC,EACDV,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAAClB,aAAa,CAACkB,KAAK,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAClE,CAAC,CACF;;EAEL;EAEAe,YAAYA,CAACC,MAAmB;IAC9B,IAAI,CAAC5B,UAAU,CAAC6B,UAAU,CAACD,MAAM,CAAC;EACpC;EAEAE,gBAAgBA,CAAA;IACd,IAAI,IAAI,CAAC9B,UAAU,CAACgB,KAAK,EAAE;MACzB,IAAI,CAACxB,aAAa,CAACuC,YAAY,CAAC,IAAI,CAAC/B,UAAU,CAACkB,KAAK,CAAC,CAACV,SAAS,CAC9D,MAAK;QACH,IAAI,CAACF,aAAa,EAAE;QACpB,IAAI,CAACN,UAAU,CAACqB,KAAK,EAAE;QACvB,IAAI,CAAC3B,aAAa,CAAC4B,OAAO,CAAC,kCAAkC,EAAE,OAAO,CAAC;MACzE,CAAC,EACDV,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD,IAAI,CAAClB,aAAa,CAACkB,KAAK,CAAC,+BAA+B,EAAE,OAAO,CAAC;MACpE,CAAC,CACF;;EAEL;EAAC,QAAAoB,CAAA,G;qBAjGU1C,eAAe,EAAA2C,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAfnD,eAAe;IAAAoD,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;IAAAC,MAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}