{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let PaisComponent = class PaisComponent {\n  constructor(paisService, fb, toastrService) {\n    this.paisService = paisService;\n    this.fb = fb;\n    this.toastrService = toastrService;\n    this.datosPaises = [];\n    this.paisForm = this.fb.group({\n      _id: [''],\n      nombre: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarDatosP();\n  }\n  cargarDatosP() {\n    this.paisService.getDatosP().subscribe(data => {\n      this.datosPaises = data;\n    }, error => {\n      console.error('Error al cargar datos de países:', error);\n    });\n  }\n  agregarPais() {\n    if (this.paisForm.valid) {\n      this.paisService.addDatosP(this.paisForm.value).subscribe(() => {\n        this.cargarDatosP();\n        this.paisForm.reset();\n      }, error => {\n        console.error('Error al agregar país:', error);\n      });\n    }\n  }\n  actualizarPais() {\n    if (this.paisForm.valid) {\n      this.paisService.updateDatosP(this.paisForm.value).subscribe(() => {\n        this.cargarDatosP();\n        this.paisForm.reset();\n      }, error => {\n        console.error('Error al actualizar país:', error);\n      });\n    }\n  }\n  eliminarPais(id) {\n    this.paisService.deleteDatosP(id).subscribe(() => {\n      this.datosPaises = this.datosPaises.filter(pais => pais._id !== id);\n    }, error => {\n      console.error('Error al eliminar país:', error);\n    });\n  }\n  editarPais(pais) {\n    this.paisForm.patchValue(pais);\n  }\n};\nPaisComponent = __decorate([Component({\n  selector: 'app-pais',\n  templateUrl: './pais.component.html',\n  styleUrls: ['./pais.component.css']\n})], PaisComponent);","map":{"version":3,"names":["Component","Validators","PaisComponent","constructor","paisService","fb","toastrService","datosPaises","paisForm","group","_id","nombre","required","ngOnInit","cargarDatosP","getDatosP","subscribe","data","error","console","agregarPais","valid","addDatosP","value","reset","actualizarPais","updateDatosP","eliminarPais","id","deleteDatosP","filter","pais","editarPais","patchValue","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\brent\\OneDrive\\Documentos\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\pais\\pais.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DatosPService } from '../../services/datos-pservice.service';\r\nimport { DatosPModel } from '../../models/datosPModel';\r\nimport { ToastrModule } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-pais',\r\n  templateUrl: './pais.component.html',\r\n  styleUrls: ['./pais.component.css']\r\n})\r\nexport class PaisComponent implements OnInit {\r\n  datosPaises: DatosPModel[] = [];\r\n  paisForm: FormGroup;\r\n\r\n  constructor(private paisService: DatosPService, private fb: FormBuilder, private toastrService:ToastrService) {\r\n    this.paisForm = this.fb.group({\r\n      _id: [''],\r\n      nombre: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarDatosP();\r\n  }\r\n\r\n  cargarDatosP() {\r\n    this.paisService.getDatosP().subscribe(\r\n      data => {\r\n        this.datosPaises = data;\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de países:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  agregarPais() {\r\n    if (this.paisForm.valid) {\r\n      this.paisService.addDatosP(this.paisForm.value).subscribe(\r\n        () => {\r\n          this.cargarDatosP();\r\n          this.paisForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al agregar país:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  actualizarPais() {\r\n    if (this.paisForm.valid) {\r\n      this.paisService.updateDatosP(this.paisForm.value).subscribe(\r\n        () => {\r\n          this.cargarDatosP();\r\n          this.paisForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar país:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  eliminarPais(id: string) {\r\n    this.paisService.deleteDatosP(id).subscribe(\r\n      () => {\r\n        this.datosPaises = this.datosPaises.filter(pais => pais._id !== id);\r\n      },\r\n      error => {\r\n        console.error('Error al eliminar país:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  editarPais(pais: DatosPModel) {\r\n    this.paisForm.patchValue(pais);\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIxBC,YAAoBC,WAA0B,EAAUC,EAAe,EAAUC,aAA2B;IAAxF,KAAAF,WAAW,GAAXA,WAAW;IAAyB,KAAAC,EAAE,GAAFA,EAAE;IAAuB,KAAAC,aAAa,GAAbA,aAAa;IAH9F,KAAAC,WAAW,GAAkB,EAAE;IAI7B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC5BC,GAAG,EAAE,CAAC,EAAE,CAAC;MACTC,MAAM,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ;KACjC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAYA,CAAA;IACV,IAAI,CAACV,WAAW,CAACW,SAAS,EAAE,CAACC,SAAS,CACpCC,IAAI,IAAG;MACL,IAAI,CAACV,WAAW,GAAGU,IAAI;IACzB,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CACF;EACH;EAEAE,WAAWA,CAAA;IACT,IAAI,IAAI,CAACZ,QAAQ,CAACa,KAAK,EAAE;MACvB,IAAI,CAACjB,WAAW,CAACkB,SAAS,CAAC,IAAI,CAACd,QAAQ,CAACe,KAAK,CAAC,CAACP,SAAS,CACvD,MAAK;QACH,IAAI,CAACF,YAAY,EAAE;QACnB,IAAI,CAACN,QAAQ,CAACgB,KAAK,EAAE;MACvB,CAAC,EACDN,KAAK,IAAG;QACNC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CACF;;EAEL;EAEAO,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACjB,QAAQ,CAACa,KAAK,EAAE;MACvB,IAAI,CAACjB,WAAW,CAACsB,YAAY,CAAC,IAAI,CAAClB,QAAQ,CAACe,KAAK,CAAC,CAACP,SAAS,CAC1D,MAAK;QACH,IAAI,CAACF,YAAY,EAAE;QACnB,IAAI,CAACN,QAAQ,CAACgB,KAAK,EAAE;MACvB,CAAC,EACDN,KAAK,IAAG;QACNC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CACF;;EAEL;EAEAS,YAAYA,CAACC,EAAU;IACrB,IAAI,CAACxB,WAAW,CAACyB,YAAY,CAACD,EAAE,CAAC,CAACZ,SAAS,CACzC,MAAK;MACH,IAAI,CAACT,WAAW,GAAG,IAAI,CAACA,WAAW,CAACuB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACrB,GAAG,KAAKkB,EAAE,CAAC;IACrE,CAAC,EACDV,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CACF;EACH;EAEAc,UAAUA,CAACD,IAAiB;IAC1B,IAAI,CAACvB,QAAQ,CAACyB,UAAU,CAACF,IAAI,CAAC;EAChC;CACD;AApEY7B,aAAa,GAAAgC,UAAA,EALzBlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWnC,aAAa,CAoEzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}