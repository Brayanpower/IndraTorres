{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CiudadService {\n  constructor(http) {\n    this.http = http;\n    this.domain = \"http://localhost:3000\"; // Replace with the correct URL of your API\n  }\n\n  getEstados() {\n    return this.http.get(`${this.domain}/api/Ciudad`).pipe(map(res => res), catchError(this.handleError));\n  }\n  addEstado(newEstado) {\n    return this.http.post(`${this.domain}/api/Ciudad`, newEstado).pipe(map(res => res), catchError(this.handleError));\n  }\n  deleteEstado(id) {\n    return this.http.delete(`${this.domain}/api/Ciudad/${id}`).pipe(map(res => res), catchError(this.handleError));\n  }\n  updateEstado(updatedEstado) {\n    return this.http.put(`${this.domain}/api/Ciudad/${updatedEstado._id}`, updatedEstado).pipe(map(res => res), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `An error occurred: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Backend returned code ${error.status}: ${error.error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function CiudadService_Factory(t) {\n    return new (t || CiudadService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CiudadService,\n    factory: CiudadService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["throwError","catchError","map","CiudadService","constructor","http","domain","getEstados","get","pipe","res","handleError","addEstado","newEstado","post","deleteEstado","id","delete","updateEstado","updatedEstado","put","_id","error","errorMessage","ErrorEvent","message","status","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\services\\estado.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { EstadoModel } from '../models/datosPModel';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CiudadService {\r\n  private domain: string = \"http://localhost:3000\"; // Replace with the correct URL of your API\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getEstados() {\r\n    return this.http.get<EstadoModel[]>(`${this.domain}/api/Ciudad`).pipe(\r\n      map(res => res),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  addEstado(newEstado: EstadoModel) {\r\n    return this.http.post<EstadoModel>(`${this.domain}/api/Ciudad`, newEstado).pipe(\r\n      map(res => res),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  deleteEstado(id: string) {\r\n    return this.http.delete<EstadoModel>(`${this.domain}/api/Ciudad/${id}`).pipe(\r\n      map(res => res),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  updateEstado(updatedEstado: EstadoModel) {\r\n    return this.http.put(`${this.domain}/api/Ciudad/${updatedEstado._id}`, updatedEstado).pipe(\r\n      map(res => res),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `An error occurred: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Backend returned code ${error.status}: ${error.error.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAW,uBAAuB,CAAC,CAAC;EAEV;;EAExCC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,aAAa,CAAC,CAACG,IAAI,CACnEP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAAC,EACfT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAC,SAASA,CAACC,SAAsB;IAC9B,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAc,GAAG,IAAI,CAACR,MAAM,aAAa,EAAEO,SAAS,CAAC,CAACJ,IAAI,CAC7EP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAAC,EACfT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAI,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACX,IAAI,CAACY,MAAM,CAAc,GAAG,IAAI,CAACX,MAAM,eAAeU,EAAE,EAAE,CAAC,CAACP,IAAI,CAC1EP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAAC,EACfT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEAO,YAAYA,CAACC,aAA0B;IACrC,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI,CAACd,MAAM,eAAea,aAAa,CAACE,GAAG,EAAE,EAAEF,aAAa,CAAC,CAACV,IAAI,CACxFP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAAC,EACfT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACW,KAAwB;IAC1C,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,sBAAsBD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC3D,MAAM;MACL;MACAF,YAAY,GAAG,yBAAyBD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;;IAEhFE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOvB,UAAU,CAACuB,YAAY,CAAC;EACjC;EAAC,QAAAK,CAAA,G;qBA5CUzB,aAAa,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAb9B,aAAa;IAAA+B,OAAA,EAAb/B,aAAa,CAAAgC,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}