{"ast":null,"code":"import { __decorate } from \"tslib\";\n// ciudad.component.ts\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let CiudadComponent = class CiudadComponent {\n  constructor(ciudadService, paisService,\n  // Inject the PaisService\n  fb) {\n    this.ciudadService = ciudadService;\n    this.paisService = paisService;\n    this.fb = fb;\n    this.ciudades = [];\n    this.paises = [];\n    this.ciudadForm = this.fb.group({\n      _id: [''],\n      nombre: ['', Validators.required],\n      pais: ['', Validators.required] // Assuming you want to associate cities with countries\n    });\n  }\n\n  ngOnInit() {\n    this.cargarCiudades();\n    this.cargarPaises();\n  }\n  cargarCiudades() {\n    this.ciudadService.getDatosP().subscribe(data => {\n      this.ciudades = data;\n      console.log('Ciudades cargadas:', this.ciudades);\n    }, error => {\n      console.error('Error al cargar ciudades:', error);\n    });\n  }\n  cargarPaises() {\n    this.paisService.getDatosP().subscribe(data => {\n      this.paises = data;\n      console.log('Datos de países cargados:', this.paises);\n    }, error => {\n      console.error('Error al cargar datos de países:', error);\n    });\n  }\n  crearCiudad() {\n    const nuevaCiudad = this.ciudadForm.value;\n    this.ciudadService.addDatosP(nuevaCiudad).subscribe(data => {\n      console.log('Ciudad creada:', data);\n      this.ciudadForm.reset();\n      this.cargarCiudades();\n    }, error => {\n      console.error('Error al crear ciudad:', error);\n    });\n  }\n  eliminarCiudad(id) {\n    this.ciudadService.deleteDatosP(id).subscribe(data => {\n      console.log('Ciudad eliminada:', data);\n      this.cargarCiudades();\n    }, error => {\n      console.error('Error al eliminar ciudad:', error);\n    });\n  }\n  actualizarCiudad() {\n    const ciudadActualizada = this.ciudadForm.value;\n    this.ciudadService.updateDatosP(ciudadActualizada).subscribe(data => {\n      console.log('Ciudad actualizada:', data);\n      this.ciudadForm.reset();\n      this.cargarCiudades();\n    }, error => {\n      console.error('Error al actualizar ciudad:', error);\n    });\n  }\n};\nCiudadComponent = __decorate([Component({\n  selector: 'app-ciudad',\n  templateUrl: './ciudad.component.html',\n  styleUrls: ['./ciudad.component.css']\n})], CiudadComponent);","map":{"version":3,"names":["Component","Validators","CiudadComponent","constructor","ciudadService","paisService","fb","ciudades","paises","ciudadForm","group","_id","nombre","required","pais","ngOnInit","cargarCiudades","cargarPaises","getDatosP","subscribe","data","console","log","error","crearCiudad","nuevaCiudad","value","addDatosP","reset","eliminarCiudad","id","deleteDatosP","actualizarCiudad","ciudadActualizada","updateDatosP","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\ciudad\\ciudad.component.ts"],"sourcesContent":["// ciudad.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CiudadService } from '../../services/ciudad.service';\r\nimport { PaisService } from '../../services/datos-pservice.service'; // Assuming you have a PaisService\r\nimport { CuidadModel } from '../../models/datosPModel';\r\nimport { DatosPModel } from '../../models/datosPModel';\r\n\r\n@Component({\r\n  selector: 'app-ciudad',\r\n  templateUrl: './ciudad.component.html',\r\n  styleUrls: ['./ciudad.component.css']\r\n})\r\nexport class CiudadComponent implements OnInit {\r\n  ciudades: CuidadModel[] = [];\r\n  paises: DatosPModel[] = [];\r\n  ciudadForm: FormGroup;\r\n\r\n  constructor(\r\n    private ciudadService: CiudadService,\r\n    private paisService: PaisService, // Inject the PaisService\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.ciudadForm = this.fb.group({\r\n      _id: [''],\r\n      nombre: ['', Validators.required],\r\n      pais: ['', Validators.required] // Assuming you want to associate cities with countries\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarCiudades();\r\n    this.cargarPaises();\r\n  }\r\n\r\n  cargarCiudades() {\r\n    this.ciudadService.getDatosP().subscribe(\r\n      data => {\r\n        this.ciudades = data;\r\n        console.log('Ciudades cargadas:', this.ciudades);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar ciudades:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  cargarPaises() {\r\n    this.paisService.getDatosP().subscribe(\r\n      data => {\r\n        this.paises = data;\r\n        console.log('Datos de países cargados:', this.paises);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de países:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  crearCiudad() {\r\n    const nuevaCiudad: CuidadModel = this.ciudadForm.value;\r\n    this.ciudadService.addDatosP(nuevaCiudad).subscribe(\r\n      data => {\r\n        console.log('Ciudad creada:', data);\r\n        this.ciudadForm.reset();\r\n        this.cargarCiudades();\r\n      },\r\n      error => {\r\n        console.error('Error al crear ciudad:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  eliminarCiudad(id: string) {\r\n    this.ciudadService.deleteDatosP(id).subscribe(\r\n      data => {\r\n        console.log('Ciudad eliminada:', data);\r\n        this.cargarCiudades();\r\n      },\r\n      error => {\r\n        console.error('Error al eliminar ciudad:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  actualizarCiudad() {\r\n    const ciudadActualizada: CuidadModel = this.ciudadForm.value;\r\n    this.ciudadService.updateDatosP(ciudadActualizada).subscribe(\r\n      data => {\r\n        console.log('Ciudad actualizada:', data);\r\n        this.ciudadForm.reset();\r\n        this.cargarCiudades();\r\n      },\r\n      error => {\r\n        console.error('Error al actualizar ciudad:', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}