{"ast":null,"code":"import { __decorate } from \"tslib\";\n// estado.component.ts\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let EstadoComponent = class EstadoComponent {\n  constructor(estadoService, fb, estadoService1, paisService, toastrService) {\n    this.estadoService = estadoService;\n    this.fb = fb;\n    this.estadoService1 = estadoService1;\n    this.paisService = paisService;\n    this.toastrService = toastrService;\n    this.estados = []; // Cambia el tipo de datos aquí\n    this.paises = [];\n    this.datosPaises = [];\n    this.ciudades = [];\n    this.datosCiudad = [];\n    this.editingEstadoId = null; // Inicializado como null\n    this.estadoForm = this.fb.group({\n      _id: [null],\n      nombre: ['', Validators.required],\n      pais: ['', Validators.required],\n      estado: ['', Validators.required] // Add form control for 'ciudad'\n    });\n  }\n\n  ngOnInit() {\n    this.cargarEstados();\n    this.cargarPaises();\n    this.cargarCiudades();\n  }\n  cargarPaises() {\n    this.paisService.getDatosP().subscribe(data => {\n      this.datosPaises = data; // Actualizar la propiedad datosPaises\n      console.log('Datos de países cargados:', this.datosPaises);\n    }, error => {\n      console.error('Error al cargar datos de países:', error);\n    });\n  }\n  filtrarEstadosPorPais(paisSeleccionado) {\n    if (paisSeleccionado) {\n      // Filtrar los estados según el país seleccionado\n      this.estados = this.estados.filter(estado => estado.pais === paisSeleccionado);\n    } else {\n      // Si no se selecciona ningún país, cargar todos los estados\n      this.cargarEstados();\n    }\n  }\n  cargarCiudades() {\n    this.estadoService1.getDatosP().subscribe(data => {\n      this.ciudades = data;\n      console.log('Ciudades cargadas:', this.ciudades);\n    }, error => {\n      console.error('Error al cargar ciudades:', error);\n    });\n  }\n  cargarEstados() {\n    this.estadoService.getEstados().subscribe(data => {\n      this.estados = data;\n      console.log('Estados cargados:', this.estados);\n    }, error => {\n      console.error('Error al cargar estados:', error);\n    });\n  }\n  crearEstado(event) {\n    event.preventDefault();\n    if (this.estadoForm.valid) {\n      const nuevoEstado = {\n        nombre: this.estadoForm.value.nombre,\n        pais: this.estadoForm.value.pais,\n        estado: this.estadoForm.value.estado\n      };\n      this.estadoService.addEstado(nuevoEstado).subscribe(data => {\n        console.log('Estado creado:', data);\n        this.estadoForm.reset();\n        this.cargarEstados();\n        this.toastrService.success('Estado creado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al crear estado:', error);\n        this.toastrService.error('Error al crear el estado', 'Error');\n      });\n    } else {\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\n    }\n  }\n  eliminarEstado(id) {\n    if (id) {\n      this.estadoService.deleteEstado(id).subscribe(data => {\n        console.log('Estado eliminado:', data);\n        this.cargarEstados();\n        this.toastrService.success('Estado eliminado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al eliminar estado:', error);\n        this.toastrService.error('Error al eliminar el estado', 'Error');\n      });\n    }\n  }\n  editarEstado(estado) {\n    this.estadoForm.patchValue(estado);\n    console.log(estado);\n  }\n  actualizarEstado() {\n    if (this.estadoForm.valid) {\n      this.estadoService.updateEstado(this.estadoForm.value).subscribe(() => {\n        this.cargarEstados();\n        this.estadoForm.reset();\n        this.toastrService.success('Estado actualizado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al actualizar estado:', error);\n        this.toastrService.error('Error al actualizar el estado', 'Error');\n      });\n    }\n  }\n};\nEstadoComponent = __decorate([Component({\n  selector: 'app-estado',\n  templateUrl: './estado.component.html',\n  styleUrls: ['./estado.component.css']\n})], EstadoComponent);","map":{"version":3,"names":["Component","Validators","EstadoComponent","constructor","estadoService","fb","estadoService1","paisService","toastrService","estados","paises","datosPaises","ciudades","datosCiudad","editingEstadoId","estadoForm","group","_id","nombre","required","pais","estado","ngOnInit","cargarEstados","cargarPaises","cargarCiudades","getDatosP","subscribe","data","console","log","error","filtrarEstadosPorPais","paisSeleccionado","filter","getEstados","crearEstado","event","preventDefault","valid","nuevoEstado","value","addEstado","reset","success","warning","eliminarEstado","id","deleteEstado","editarEstado","patchValue","actualizarEstado","updateEstado","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\estado\\estado.component.ts"],"sourcesContent":["// estado.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CuidadModel, DatosPModel, EstadoModel } from '../../models/datosPModel';\r\nimport { CiudadService } from '../../services/estado.service';\r\nimport { DatosPService } from '../../services/datos-pservice.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { EstadoService } from '../../services/ciudad.service';\r\n@Component({\r\n  selector: 'app-estado',\r\n  templateUrl: './estado.component.html',\r\n  styleUrls: ['./estado.component.css']\r\n})\r\nexport class EstadoComponent implements OnInit {\r\n  estados: EstadoModel[] = []; // Cambia el tipo de datos aquí\r\n  paises: DatosPModel[] = [];\r\n  datosPaises: DatosPModel[] = [];\r\n  ciudades: CuidadModel[] = [];\r\n  datosCiudad: DatosPModel[] = [];\r\n  estadoForm: FormGroup;\r\n  editingEstadoId: string | null = null; // Inicializado como null\r\n\r\n  constructor(\r\n    private estadoService: CiudadService,\r\n    private fb: FormBuilder,\r\n    private estadoService1: EstadoService,\r\n    private paisService: DatosPService,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.estadoForm = this.fb.group({\r\n      _id: [null],\r\n      nombre: ['', Validators.required],\r\n      pais: ['', Validators.required], // Add form control for 'pais'\r\n      estado: ['', Validators.required] // Add form control for 'ciudad'\r\n    });\r\n  }\r\n  \r\n\r\n  ngOnInit() {\r\n    this.cargarEstados();\r\n    this.cargarPaises();\r\n    this.cargarCiudades();\r\n  }\r\n\r\n  \r\n  cargarPaises() {\r\n    this.paisService.getDatosP().subscribe(\r\n      data => {\r\n        this.datosPaises = data; // Actualizar la propiedad datosPaises\r\n        console.log('Datos de países cargados:', this.datosPaises);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de países:', error);\r\n      }\r\n    );\r\n  }\r\n  \r\n  filtrarEstadosPorPais(paisSeleccionado: string) {\r\n    if (paisSeleccionado) {\r\n      // Filtrar los estados según el país seleccionado\r\n      this.estados = this.estados.filter(estado => estado.pais === paisSeleccionado);\r\n    } else {\r\n      // Si no se selecciona ningún país, cargar todos los estados\r\n      this.cargarEstados();\r\n    }\r\n  }\r\n  \r\n  cargarCiudades() {\r\n    this.estadoService1.getDatosP().subscribe(\r\n      data => {\r\n        this.ciudades = data;\r\n        console.log('Ciudades cargadas:', this.ciudades);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar ciudades:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  cargarEstados() {\r\n    this.estadoService.getEstados().subscribe(\r\n      data => {\r\n        this.estados = data;\r\n        console.log('Estados cargados:', this.estados);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar estados:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  crearEstado(event: Event) {\r\n    event.preventDefault();\r\n\r\n    if (this.estadoForm.valid) {\r\n      const nuevoEstado: EstadoModel = {\r\n        nombre: this.estadoForm.value.nombre,\r\n        pais: this.estadoForm.value.pais,\r\n        estado: this.estadoForm.value.estado,\r\n      };\r\n\r\n      this.estadoService.addEstado(nuevoEstado).subscribe(\r\n        data => {\r\n          console.log('Estado creado:', data);\r\n          this.estadoForm.reset();\r\n          this.cargarEstados();\r\n          this.toastrService.success('Estado creado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al crear estado:', error);\r\n          this.toastrService.error('Error al crear el estado', 'Error');\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\r\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\r\n    }\r\n  }\r\n\r\n  eliminarEstado(id: string | undefined) {\r\n    if (id) {\r\n      this.estadoService.deleteEstado(id).subscribe(\r\n        data => {\r\n          console.log('Estado eliminado:', data);\r\n          this.cargarEstados();\r\n          this.toastrService.success('Estado eliminado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar estado:', error);\r\n          this.toastrService.error('Error al eliminar el estado', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarEstado( estado: EstadoModel) {\r\n    this.estadoForm.patchValue(estado);\r\n    console.log(estado)\r\n  }\r\n\r\n  actualizarEstado() {\r\n    if (this.estadoForm.valid) {\r\n      this.estadoService.updateEstado(this.estadoForm.value).subscribe(\r\n        () => {\r\n          this.cargarEstados();\r\n          this.estadoForm.reset();\r\n          this.toastrService.success('Estado actualizado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar estado:', error);\r\n          this.toastrService.error('Error al actualizar el estado', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}