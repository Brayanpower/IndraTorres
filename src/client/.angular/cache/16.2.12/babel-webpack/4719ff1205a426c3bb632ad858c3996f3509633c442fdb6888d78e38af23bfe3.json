{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LugarComponent = class LugarComponent {\n  constructor(lugarService, fb, datosPService, toastrService) {\n    this.lugarService = lugarService;\n    this.fb = fb;\n    this.datosPService = datosPService;\n    this.toastrService = toastrService;\n    this.lugares = [];\n    this.paises = [];\n    this.datosPaises = [];\n    this.editingLugarId = null;\n    this.lugarForm = this.fb.group({\n      _id: [null],\n      nombre: ['', Validators.required],\n      direccion: ['', Validators.required],\n      pais: ['', Validators.required],\n      ciudad: ['', Validators.required],\n      Estado: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarLugares();\n    this.cargarPaises();\n  }\n  cargarLugares() {\n    this.lugarService.getLugars().subscribe(data => {\n      this.lugares = data;\n      console.log('Lugares cargados:', this.lugares);\n    }, error => {\n      console.error('Error al cargar lugares:', error);\n    });\n  }\n  cargarPaises() {\n    this.datosPService.getDatosP().subscribe(data => {\n      this.datosPaises = data;\n      console.log('Datos de países cargados:', this.datosPaises);\n    }, error => {\n      console.error('Error al cargar datos de países:', error);\n    });\n  }\n  crearLugar(event) {\n    event.preventDefault();\n    if (this.lugarForm.valid) {\n      const nuevoLugar = {\n        nombre: this.lugarForm.value.nombre,\n        direccion: this.lugarForm.value.direccion,\n        pais: this.lugarForm.value.pais,\n        ciudad: this.lugarForm.value.ciudad,\n        Estado: this.lugarForm.value.Estado\n      };\n      this.lugarService.addLugar(nuevoLugar).subscribe(data => {\n        console.log('Lugar creado:', data);\n        this.lugarForm.reset();\n        this.cargarLugares();\n        this.toastrService.success('Lugar creado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al crear lugar:', error);\n        this.toastrService.error('Error al crear el lugar', 'Error');\n      });\n    } else {\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\n    }\n  }\n  eliminarLugar(id) {\n    if (id) {\n      this.lugarService.deleteLugar(id).subscribe(data => {\n        console.log('Lugar eliminado:', data);\n        this.cargarLugares();\n        this.toastrService.success('Lugar eliminado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al eliminar lugar:', error);\n        this.toastrService.error('Error al eliminar el lugar', 'Error');\n      });\n    }\n  }\n  editarLugar(lugar) {\n    this.lugarForm.patchValue(lugar);\n    console.log(lugar);\n  }\n  actualizarLugar() {\n    if (this.lugarForm.valid) {\n      this.lugarService.updateLugar(this.lugarForm.value).subscribe(() => {\n        this.cargarLugares();\n        this.lugarForm.reset();\n        this.toastrService.success('Lugar actualizado correctamente', 'Aviso');\n      }, error => {\n        console.error('Error al actualizar lugar:', error);\n        this.toastrService.error('Error al actualizar el lugar', 'Error');\n      });\n    }\n  }\n};\nLugarComponent = __decorate([Component({\n  selector: 'app-lugar',\n  templateUrl: './lugar.component.html',\n  styleUrls: ['./lugar.component.css']\n})], LugarComponent);","map":{"version":3,"names":["Component","Validators","LugarComponent","constructor","lugarService","fb","datosPService","toastrService","lugares","paises","datosPaises","editingLugarId","lugarForm","group","_id","nombre","required","direccion","pais","ciudad","Estado","ngOnInit","cargarLugares","cargarPaises","getLugars","subscribe","data","console","log","error","getDatosP","crearLugar","event","preventDefault","valid","nuevoLugar","value","addLugar","reset","success","warning","eliminarLugar","id","deleteLugar","editarLugar","lugar","patchValue","actualizarLugar","updateLugar","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Brayan Mendiola\\Documents\\GitHub\\IndraTorres\\src\\client\\src\\app\\components\\lugar-admun\\lugar-admun.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { DatosPModel, LugarModel } from '../../models/datosPModel';\r\nimport { DatosPService } from '../../services/datos-pservice.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { LugarService } from '../../services/lugar.service';\r\n\r\n@Component({\r\n  selector: 'app-lugar',\r\n  templateUrl: './lugar.component.html',\r\n  styleUrls: ['./lugar.component.css']\r\n})\r\nexport class LugarComponent implements OnInit {\r\n  lugares: LugarModel[] = [];\r\n  paises: DatosPModel[] = [];\r\n  datosPaises: DatosPModel[] = [];\r\n  lugarForm: FormGroup;\r\n  editingLugarId: string | null = null;\r\n\r\n  constructor(\r\n    private lugarService: LugarService,\r\n    private fb: FormBuilder,\r\n    private datosPService: DatosPService,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.lugarForm = this.fb.group({\r\n      _id: [null],\r\n      nombre: ['', Validators.required],\r\n      direccion: ['', Validators.required],\r\n      pais: ['', Validators.required],\r\n      ciudad: ['', Validators.required],\r\n      Estado: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.cargarLugares();\r\n    this.cargarPaises();\r\n  }\r\n\r\n  cargarLugares(): void {\r\n    this.lugarService.getLugars().subscribe(\r\n      data => {\r\n        this.lugares = data;\r\n        console.log('Lugares cargados:', this.lugares);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar lugares:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  cargarPaises(): void {\r\n    this.datosPService.getDatosP().subscribe(\r\n      data => {\r\n        this.datosPaises = data;\r\n        console.log('Datos de países cargados:', this.datosPaises);\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datos de países:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  crearLugar(event: Event): void {\r\n    event.preventDefault();\r\n\r\n    if (this.lugarForm.valid) {\r\n      const nuevoLugar: LugarModel = {\r\n        nombre: this.lugarForm.value.nombre,\r\n        direccion: this.lugarForm.value.direccion,\r\n        pais: this.lugarForm.value.pais\r\n        ciudad: this.lugarForm.value.ciudad,\r\n        Estado: this.lugarForm.value.Estado\r\n      };\r\n\r\n      this.lugarService.addLugar(nuevoLugar).subscribe(\r\n        data => {\r\n          console.log('Lugar creado:', data);\r\n          this.lugarForm.reset();\r\n          this.cargarLugares();\r\n          this.toastrService.success('Lugar creado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al crear lugar:', error);\r\n          this.toastrService.error('Error al crear el lugar', 'Error');\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Formulario no válido. Por favor, complete todos los campos requeridos.');\r\n      this.toastrService.warning('Formulario no válido. Por favor, complete todos los campos requeridos.', 'Advertencia');\r\n    }\r\n  }\r\n\r\n  eliminarLugar(id: string | undefined): void {\r\n    if (id) {\r\n      this.lugarService.deleteLugar(id).subscribe(\r\n        data => {\r\n          console.log('Lugar eliminado:', data);\r\n          this.cargarLugares();\r\n          this.toastrService.success('Lugar eliminado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar lugar:', error);\r\n          this.toastrService.error('Error al eliminar el lugar', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarLugar(lugar: LugarModel): void {\r\n    this.lugarForm.patchValue(lugar);\r\n    console.log(lugar);\r\n  }\r\n\r\n  actualizarLugar(): void {\r\n    if (this.lugarForm.valid) {\r\n      this.lugarService.updateLugar(this.lugarForm.value).subscribe(\r\n        () => {\r\n          this.cargarLugares();\r\n          this.lugarForm.reset();\r\n          this.toastrService.success('Lugar actualizado correctamente', 'Aviso');\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar lugar:', error);\r\n          this.toastrService.error('Error al actualizar el lugar', 'Error');\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}